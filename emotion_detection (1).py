# -*- coding: utf-8 -*-
"""emotion detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MY3wainFXG5FRdY5U6RkLlFI_kglu4x-
"""

import pandas as pd
df=pd.read_csv('/content/emotion_words.csv')

df.columns

df=df.drop(columns=['odds'])

df=df.drop(columns=['freq'])

df['emotion'].unique()
for i in df['emotion'].unique():
  if i=='love' or i=='anger':
    continue
  df = df[df['emotion'] != i]
# (df['emotion']=='love').shape

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['emotion']=le.fit_transform(df['emotion'])

df

df['emotion'].unique()

df

from sklearn.feature_extraction.text import TfidfVectorizer

tfidfv=TfidfVectorizer(ngram_range=(1, 2))

from sklearn.model_selection import train_test_split
x=df['word']
y=df['emotion']
x_train,x_test,y_train,y_test=train_test_split(x,y)
y

x_train_features=tfidfv.fit_transform(x_train)
x_test_features=tfidfv.transform(x_test)

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()
lr.fit(x_train_features,y_train)

m=lr.predict(x_train_features)

from sklearn.metrics import accuracy_score

print(accuracy_score(m,y_train)*100)

k=lr.predict(x_test_features)

print(accuracy_score(k,y_test)*100)

m=['delivers']
p=tfidfv.transform(m)
if lr.predict(p):
  print("love")
else:
  print("anger")

